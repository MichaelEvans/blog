<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Code | Gadget Habit]]></title>
  <link href="http://michaelevans.org/blog/categories/code/atom.xml" rel="self"/>
  <link href="http://michaelevans.org/"/>
  <updated>2013-10-13T21:02:43-04:00</updated>
  <id>http://michaelevans.org/</id>
  <author>
    <name><![CDATA[Michael Evans]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Using a ViewPager in a ScrollView]]></title>
    <link href="http://michaelevans.org/blog/2013/10/13/using-a-viewpager-in-a-scrollview/"/>
    <updated>2013-10-13T20:48:00-04:00</updated>
    <id>http://michaelevans.org/blog/2013/10/13/using-a-viewpager-in-a-scrollview</id>
    <content type="html"><![CDATA[<p>For a new app that I&rsquo;m working on, I wanted to use a ViewPager inside a ScrollView in order to make a simple image carousel. The only problem is, ScrollViews don&rsquo;t seem to play nicely with horizontally swiping Views. As soon as the user moves their finger even slightly up or down, the ViewPager page change is cancelled, and the page snaps back to the current item. This can lead to an extremely frustrating user experience, because it is difficult for the user to understand why the views won&rsquo;t swipe.</p>

<!-- more -->


<p>A popular solution that I&rsquo;ve seen online is to use the ViewPager&rsquo;s <code>getParent().requestDisallowInterceptTouchEvent(true);</code> method to prevent the ScrollView from scrolling while the ViewPager is being touched or scrolled. The solution that I&rsquo;ve been using is a bit like this, but it provides a little bit of a &ldquo;drag threshold&rdquo;, which is a bit forgiving in the event that the user is trying to drag the ScrollView, but happens to have their finger in the ViewPager. The code I used is as follows:</p>

<p>``` java PagerTouchListener.java
mPager.setOnTouchListener(new View.OnTouchListener() {</p>

<pre><code>int dragthreshold = 30;
int downX;
int downY;

@Override 
public boolean onTouch(View v, MotionEvent event) {

    switch (event.getAction()) {
    case MotionEvent.ACTION_DOWN:
        downX = (int) event.getRawX();
        downY = (int) event.getRawY();
        break; 
    case MotionEvent.ACTION_MOVE:
        int distanceX = Math.abs((int) event.getRawX() - downX);
        int distanceY = Math.abs((int) event.getRawY() - downY);

        if (distanceY &gt; distanceX &amp;&amp; distanceY &gt; dragthreshold) {
            mPager.getParent().requestDisallowInterceptTouchEvent(false); 
            mScrollView.getParent().requestDisallowInterceptTouchEvent(true); 
        } else if (distanceX &gt; distanceY &amp;&amp; distanceX &gt; dragthreshold) {
            mPager.getParent().requestDisallowInterceptTouchEvent(true); 
            mScrollView.getParent().requestDisallowInterceptTouchEvent(false); 
        } 
        break; 
    case MotionEvent.ACTION_UP:
        mScrollView.getParent().requestDisallowInterceptTouchEvent(false); 
        mPager.getParent().requestDisallowInterceptTouchEvent(false); 
        break; 
    } 
    return false; 
} 
</code></pre>

<p>});
```</p>

<p>I found this very useful solution on <a href="http://stackoverflow.com/questions/8381697/viewpager-inside-a-scrollview-does-not-scroll-correclty/16224484#16224484">StackOverflow</a>, among many other solutions that did work (although not as nicely as this one).</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Clickable Links in Android ListViews]]></title>
    <link href="http://michaelevans.org/blog/2013/03/29/clickable-links-in-android-listviews/"/>
    <updated>2013-03-29T00:14:00-04:00</updated>
    <id>http://michaelevans.org/blog/2013/03/29/clickable-links-in-android-listviews</id>
    <content type="html"><![CDATA[<p>As part of my newest app (<a href="https://play.google.com/store/apps/details?id=com.evans.hackernews">Hacker News for Android</a>), I needed to add the ability to click on links in a ListView, and have them open in the browser, while maintaining the ability for the user to click on the ListView row itself, and have the row listen to the click.</p>

<p>If you try using <code>Linkify</code> and <code>LinkMovementMethod</code>, which you&rsquo;d use on normal links in a TextView, you&rsquo;ll find that you can no longer use the ListView properly.</p>

<!-- more -->


<p>The solution I&rsquo;m using is slightly modified from this answer on StackOverflow <a href="http://stackoverflow.com/a/7327332/458603">here</a>.</p>

<p>``` java LinkifiedTextView.java
import android.content.Context;
import android.text.Layout;
import android.text.Selection;
import android.text.Spannable;
import android.text.Spanned;
import android.text.style.ClickableSpan;
import android.util.AttributeSet;
import android.view.MotionEvent;
import android.widget.TextView;</p>

<p>public class LinkifiedTextView extends TextView {</p>

<pre><code>public LinkifiedTextView(Context context, AttributeSet attrs) {
    super(context, attrs);
}

@Override
public boolean onTouchEvent(MotionEvent event) {
    TextView widget = (TextView) this;
    Object text = widget.getText();
    if (text instanceof Spanned) {
        Spannable buffer = (Spannable) text;

        int action = event.getAction();

        if (action == MotionEvent.ACTION_UP
                || action == MotionEvent.ACTION_DOWN) {
            int x = (int) event.getX();
            int y = (int) event.getY();

            x -= widget.getTotalPaddingLeft();
            y -= widget.getTotalPaddingTop();

            x += widget.getScrollX();
            y += widget.getScrollY();

            Layout layout = widget.getLayout();
            int line = layout.getLineForVertical(y);
            int off = layout.getOffsetForHorizontal(line, x);

            ClickableSpan[] link = buffer.getSpans(off, off,
                    ClickableSpan.class);

            if (link.length != 0) {
                if (action == MotionEvent.ACTION_UP) {
                    link[0].onClick(widget);
                } else if (action == MotionEvent.ACTION_DOWN) {
                    Selection.setSelection(buffer,
                            buffer.getSpanStart(link[0]),
                            buffer.getSpanEnd(link[0]));
                }
                return true;
            }
        }

    }

    return false;
}
</code></pre>

<p>}
```</p>

<p>Just drop this in as a replacement for your normal TextView, and you&rsquo;ll have the clicks on links in your text intercepted. Hope this helps a fellow developer!</p>

<hr />

<p>Like this post? Any other Android tips you&rsquo;d like to hear about? Let me know on <a href="https://twitter.com/m_evans10">Twitter</a> or <a href="https://plus.google.com/114052868601022948953/posts">Google Plus</a>, or leave a comment.</p>
]]></content>
  </entry>
  
</feed>
