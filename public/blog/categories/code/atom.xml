<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Code | Gadget Habit]]></title>
  <link href="http://michaelevans.org/blog/categories/code/atom.xml" rel="self"/>
  <link href="http://michaelevans.org/"/>
  <updated>2015-05-07T20:34:02-04:00</updated>
  <id>http://michaelevans.org/</id>
  <author>
    <name><![CDATA[Michael Evans]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Android Ripples with Rounded Corners]]></title>
    <link href="http://michaelevans.org/blog/2015/05/07/android-ripples-with-rounded-corners/"/>
    <updated>2015-05-07T22:55:36-04:00</updated>
    <id>http://michaelevans.org/blog/2015/05/07/android-ripples-with-rounded-corners</id>
    <content type="html"><![CDATA[<p>So recently I was trying to add a ripple to a view that had rounded corners. Simple enough right? Let&rsquo;s just say I have a FrameLayout with the background similar to this one:</p>

<p>```
&lt;?xml version=&ldquo;1.0&rdquo; encoding=&ldquo;utf-8&rdquo;?>
&lt;shape xmlns:android=&ldquo;<a href="http://schemas.android.com/apk/res/android">http://schemas.android.com/apk/res/android</a>&rdquo;</p>

<pre><code>android:shape="rectangle"&gt;
&lt;solid android:color="@android:color/transparent"/&gt;
&lt;corners android:radius="15dp" /&gt;
&lt;stroke
    android:width="1px"
    android:color="#000000" /&gt;
</code></pre>

<p></shape>
```</p>

<p>It&rsquo;s not quite as simple as setting the foreground to <code>?attr/selectableItemBackground</code>, or else you&rsquo;ll see the ripple surpasses the corners (which doesn&rsquo;t look <em>so</em> bad when your border radius is small, but this would look terrible with a circlular view):</p>

<p><img class="center" src="/images/2015/05/07/before.gif" width="600" height="600" title="Rounded Corner Fail!" ></p>

<p>The solution for this lies in the special mask layer of the <a href="https://developer.android.com/reference/android/graphics/drawable/RippleDrawable.html">RippleDrawable</a>. You specify the mask layer via the <code>android:id</code> value set to <code>@android:id/mask</code>. For the example above, you can set the mask to the same size/shape as the view you&rsquo;re masking, and then the ripple will only show for that area. For something like our example above, you&rsquo;d use something like this:</p>

<p>```
&lt;?xml version=&ldquo;1.0&rdquo; encoding=&ldquo;utf-8&rdquo;?>
&lt;ripple xmlns:android=&ldquo;<a href="http://schemas.android.com/apk/res/android">http://schemas.android.com/apk/res/android</a>&rdquo;</p>

<pre><code>android:color="?android:attr/colorControlHighlight"&gt;
&lt;item android:id="@android:id/mask"&gt;
    &lt;shape android:shape="rectangle"&gt;
        &lt;solid android:color="#000000" /&gt;
        &lt;corners android:radius="15dp" /&gt;
    &lt;/shape&gt;
&lt;/item&gt;
&lt;item android:drawable="@drawable/rounded_corners" /&gt;
</code></pre>

<p></ripple>
```</p>

<p>Now when you tap on the view, you&rsquo;ll see something like this:</p>

<p><img class="center" src="/images/2015/05/07/after.gif" width="600" height="600" title="Rounded Corners!" ></p>

<p><em>Huzzah!</em></p>

<p>Another tip: if you don&rsquo;t set a click listener for a FrameLayout (like we used in this example), the pressed state will never be used!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Blurred background effect for Android]]></title>
    <link href="http://michaelevans.org/blog/2014/07/09/blurred-background-effect-for-android/"/>
    <updated>2014-07-09T23:04:46-04:00</updated>
    <id>http://michaelevans.org/blog/2014/07/09/blurred-background-effect-for-android</id>
    <content type="html"><![CDATA[<p>A few months ago, the Android design team reviewed apps that they thought were good-looking, and were referred to as the &ldquo;<a href="https://play.google.com/store/apps/collection/promotion_3000235_beautiful_apps?hl=en">Beautiful Design Collection</a>&rdquo;, as part of their <a href="https://www.youtube.com/playlist?list=PLWz5rJ2EKKc8j2B95zGMb8muZvrIy-wcF">Android Design in Action</a> series.</p>

<p>One of these apps was <a href="https://play.google.com/store/apps/details?id=com.etsy.android&amp;hl=en">Etsy</a>, which had a very cool fading blur background effect, which you can see here:</p>

<p><img class="center" src="/images/2014/07/09/2014-07-09-23_25_40.gif" width="600" height="600" title="Etsy Example" ></p>

<p>As a learning experiment, I set off to replicate this behavior. I had seen a library by Manuel Peinado called <a href="https://github.com/ManuelPeinado/GlassActionBar">GlassActionBar</a> which demonstrated a similar glass-like blur effect on the ActionBar, so I decided to use that code for blurring my background.</p>

<p>The code itself is pretty interesting, specifically the bit for versions on Jelly Bean or higher. If you&rsquo;re using API version 16 and up, you can use <a href="http://android-developers.blogspot.com/2013/08/renderscript-intrinsics.html">Renderscript Intrinsics</a>, which are a set of built-in functions that require very little code to use, but are optimized for high-performance.</p>

<p>In my sample tests, using Renderscript to blur the image took on average about ~175ms, vs ~2 seconds doing the blur using Java code. (The required code is also only a tiny fraction of the length of the Renderscript one).</p>

<p>Renderscript is extremely easy to add to your project, just throw
```</p>

<pre><code>    renderscriptTargetApi 19
    renderscriptSupportMode true
</code></pre>

<p><code>``
in your</code>build.gradle` and you should be ready to roll.</p>

<p>Once you have the blurring, the rest of the process is fairly straight forward. When you plan to leave an activity, create a bitmap of the current view and write it to disk. When you start your new activity (which should have a transparent background), you override the transition (otherwise you&rsquo;ll get the default zoom), and set the background to the blurred image you saved earlier. Add a fade in for the alpha and you get a nice little effect!</p>

<p><img class="center" src="/images/2014/07/09/2014-07-09-23_34_05.gif" width="600" height="600" title="My Example" ></p>

<p>If you&rsquo;d like to see how this looks in a sample project, you can find it on Github <a href="https://github.com/MichaelEvans/EtsyBlurExample">here</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ColorArt: a library to do iTunes 11-style color matching for Android]]></title>
    <link href="http://michaelevans.org/blog/2013/12/12/colorart-a-library-to-do-itunes-11-style-color-matching-for-android/"/>
    <updated>2013-12-12T00:02:34-05:00</updated>
    <id>http://michaelevans.org/blog/2013/12/12/colorart-a-library-to-do-itunes-11-style-color-matching-for-android</id>
    <content type="html"><![CDATA[<p>Last week I open sourced an Android library called <a href="https://github.com/MichaelEvans/ColorArt">ColorArt</a>, which is a port of the popular OS X library written by the guys over at <a href="http://www.panic.com/blog/itunes-11-and-colors/">Panic</a>. It allows you to use a source image to create a themed image/text display, very similar to the effect which is done in iTunes 11.</p>

<p><img class="center" src="/images/2013/12/12/itunes-11.png" width="600" height="600" title="iTunes Example" ></p>

<!-- more -->


<h3>Using the Library</h3>

<p>ColorArt is pretty easy to use, and can add a cool effect to any app. In order to add it to your project, add the dependency to your <code>build.gradle</code> file:</p>

<p><code>
compile 'org.michaelevans.colorart:library:0.0.1'﻿
</code></p>

<p>The next thing you need is to take a Bitmap that you want to use, and pass it to a ColorArt object:</p>

<p><code>
Bitmap bitmap = BitmapFactory.decodeResource(getResources(), R.drawable.album);
ColorArt colorArt = new ColorArt(bitmap);
</code></p>

<p>After that, it&rsquo;s as simple as calling some getter methods in order to get the colors that make up the image:</p>

<p><code>
colorArt.getBackgroundColor()
colorArt.getPrimaryColor()
colorArt.getSecondaryColor()
colorArt.getDetailColor()
</code></p>

<p>Voilà! Now you can make cool themed image/text display using Bitmaps as part of your application.</p>

<p><img class="center" src="/images/2013/12/12/sample.png" width="300" height="300" title="Sample" ></p>

<h3>Bonus: FadingImageView</h3>

<p>I also added a class that extends ImageView, which will allow you to add a subtle gradient from the image, to the background color, similar to what you see in the iTunes display. It&rsquo;s also extremely easy to use:</p>

<ol>
<li>Replace the ImageView that you are presently using with a <code>FadingImageView</code>.</li>
<li>Call
<code>
mFadingImageView.setBackgroundColor(colorArt.getBackgroundColor(), FadingImageView.FadeSide.LEFT);
</code>
to set the background color to fade to, and which side gets the gradient.</li>
</ol>


<p>That&rsquo;s it!</p>

<p>You can also toggle that gradient with a call to <code>mImageView.setFadeEnabled(true/false);</code>.</p>

<hr />

<p>Are you using this library in your app? Please let me know so I can add a link to it on the <a href="https://github.com/MichaelEvans/ColorArt">GitHub project page</a>! Also, feel free to send pull requests!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using a ViewPager in a ScrollView]]></title>
    <link href="http://michaelevans.org/blog/2013/10/13/using-a-viewpager-in-a-scrollview/"/>
    <updated>2013-10-13T20:48:00-04:00</updated>
    <id>http://michaelevans.org/blog/2013/10/13/using-a-viewpager-in-a-scrollview</id>
    <content type="html"><![CDATA[<p>For a new app that I&rsquo;m working on, I wanted to use a ViewPager inside a ScrollView in order to make a simple image carousel. The only problem is, ScrollViews don&rsquo;t seem to play nicely with horizontally swiping Views. As soon as the user moves their finger even slightly up or down, the ViewPager page change is cancelled, and the page snaps back to the current item. This can lead to an extremely frustrating user experience, because it is difficult for the user to understand why the views won&rsquo;t swipe.</p>

<!-- more -->


<p>A popular solution that I&rsquo;ve seen online is to use the ViewPager&rsquo;s <code>getParent().requestDisallowInterceptTouchEvent(true);</code> method to prevent the ScrollView from scrolling while the ViewPager is being touched or scrolled. The solution that I&rsquo;ve been using is a bit like this, but it provides a little bit of a &ldquo;drag threshold&rdquo;, which is a bit forgiving in the event that the user is trying to drag the ScrollView, but happens to have their finger in the ViewPager. The code I used is as follows:</p>

<p>``` java PagerTouchListener.java
mPager.setOnTouchListener(new View.OnTouchListener() {</p>

<pre><code>int dragthreshold = 30;
int downX;
int downY;

@Override 
public boolean onTouch(View v, MotionEvent event) {

    switch (event.getAction()) {
    case MotionEvent.ACTION_DOWN:
        downX = (int) event.getRawX();
        downY = (int) event.getRawY();
        break; 
    case MotionEvent.ACTION_MOVE:
        int distanceX = Math.abs((int) event.getRawX() - downX);
        int distanceY = Math.abs((int) event.getRawY() - downY);

        if (distanceY &gt; distanceX &amp;&amp; distanceY &gt; dragthreshold) {
            mPager.getParent().requestDisallowInterceptTouchEvent(false); 
            mScrollView.getParent().requestDisallowInterceptTouchEvent(true); 
        } else if (distanceX &gt; distanceY &amp;&amp; distanceX &gt; dragthreshold) {
            mPager.getParent().requestDisallowInterceptTouchEvent(true); 
            mScrollView.getParent().requestDisallowInterceptTouchEvent(false); 
        } 
        break; 
    case MotionEvent.ACTION_UP:
        mScrollView.getParent().requestDisallowInterceptTouchEvent(false); 
        mPager.getParent().requestDisallowInterceptTouchEvent(false); 
        break; 
    } 
    return false; 
} 
</code></pre>

<p>});
```</p>

<p>I found this very useful solution on <a href="http://stackoverflow.com/questions/8381697/viewpager-inside-a-scrollview-does-not-scroll-correclty/16224484#16224484">StackOverflow</a>, among many other solutions that did work (although not as nicely as this one).</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Clickable Links in Android ListViews]]></title>
    <link href="http://michaelevans.org/blog/2013/03/29/clickable-links-in-android-listviews/"/>
    <updated>2013-03-29T00:14:00-04:00</updated>
    <id>http://michaelevans.org/blog/2013/03/29/clickable-links-in-android-listviews</id>
    <content type="html"><![CDATA[<p>As part of my newest app (<a href="https://play.google.com/store/apps/details?id=com.evans.hackernews">Hacker News for Android</a>), I needed to add the ability to click on links in a ListView, and have them open in the browser, while maintaining the ability for the user to click on the ListView row itself, and have the row listen to the click.</p>

<p>If you try using <code>Linkify</code> and <code>LinkMovementMethod</code>, which you&rsquo;d use on normal links in a TextView, you&rsquo;ll find that you can no longer use the ListView properly.</p>

<!-- more -->


<p>The solution I&rsquo;m using is slightly modified from this answer on StackOverflow <a href="http://stackoverflow.com/a/7327332/458603">here</a>.</p>

<p>``` java LinkifiedTextView.java
import android.content.Context;
import android.text.Layout;
import android.text.Selection;
import android.text.Spannable;
import android.text.Spanned;
import android.text.style.ClickableSpan;
import android.util.AttributeSet;
import android.view.MotionEvent;
import android.widget.TextView;</p>

<p>public class LinkifiedTextView extends TextView {</p>

<pre><code>public LinkifiedTextView(Context context, AttributeSet attrs) {
    super(context, attrs);
}

@Override
public boolean onTouchEvent(MotionEvent event) {
    TextView widget = (TextView) this;
    Object text = widget.getText();
    if (text instanceof Spanned) {
        Spannable buffer = (Spannable) text;

        int action = event.getAction();

        if (action == MotionEvent.ACTION_UP
                || action == MotionEvent.ACTION_DOWN) {
            int x = (int) event.getX();
            int y = (int) event.getY();

            x -= widget.getTotalPaddingLeft();
            y -= widget.getTotalPaddingTop();

            x += widget.getScrollX();
            y += widget.getScrollY();

            Layout layout = widget.getLayout();
            int line = layout.getLineForVertical(y);
            int off = layout.getOffsetForHorizontal(line, x);

            ClickableSpan[] link = buffer.getSpans(off, off,
                    ClickableSpan.class);

            if (link.length != 0) {
                if (action == MotionEvent.ACTION_UP) {
                    link[0].onClick(widget);
                } else if (action == MotionEvent.ACTION_DOWN) {
                    Selection.setSelection(buffer,
                            buffer.getSpanStart(link[0]),
                            buffer.getSpanEnd(link[0]));
                }
                return true;
            }
        }

    }

    return false;
}
</code></pre>

<p>}
```</p>

<p>Just drop this in as a replacement for your normal TextView, and you&rsquo;ll have the clicks on links in your text intercepted. Hope this helps a fellow developer!</p>

<hr />

<p>Like this post? Any other Android tips you&rsquo;d like to hear about? Let me know on <a href="https://twitter.com/m_evans10">Twitter</a> or <a href="https://plus.google.com/114052868601022948953/posts">Google Plus</a>, or leave a comment.</p>
]]></content>
  </entry>
  
</feed>
