<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Android | Gadget Habit]]></title>
  <link href="http://michaelevans.org/blog/categories/android/atom.xml" rel="self"/>
  <link href="http://michaelevans.org/"/>
  <updated>2013-08-14T23:53:29-04:00</updated>
  <id>http://michaelevans.org/</id>
  <author>
    <name><![CDATA[Michael Evans]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Tutorial: Building an Android To-Do List app using Parse]]></title>
    <link href="http://michaelevans.org/blog/2013/08/14/tutorial-building-an-android-to-do-list-app-using-parse/"/>
    <updated>2013-08-14T22:08:00-04:00</updated>
    <id>http://michaelevans.org/blog/2013/08/14/tutorial-building-an-android-to-do-list-app-using-parse</id>
    <content type="html"><![CDATA[<p>For a while now I&rsquo;ve been using <a href="http://www.parse.com">Parse</a> for small apps, it allows you to iterate quickly and create a backend for an app without too much work. It also seems like a perfect jumping off point for a series of Android tutorials, where we&rsquo;ll be building a &ldquo;Todo List&rdquo; application. (This tutorial assumes that you have <a href="http://developer.android.com/tools/sdk/eclipse-adt.html">Eclipse and the ADT</a> installed already.)</p>

<!-- more -->


<h2>The Setup</h2>

<p>First thing you&rsquo;ll want to do is sign up for Parse, and create a new Application. I called mine &ldquo;Todo&rdquo; here, but you can call it anything you&rsquo;d like. After you pick a name, you&rsquo;ll be presented a screen like the following, which contains your API keys. Do not lose these, this is how your app will connect to the Parse services. (I have removed my keys in the screenshot below.)</p>

<p><img class="center" src="/images/2013/08/14/parse_keys.png" width="300" height="500" title="Parse Keys" ></p>

<p>Next, you&rsquo;ll want to download the Parse libraries from <a href="https://parse.com/downloads/android/Parse/latest">here</a>.</p>

<p>Back in Eclipse, open the New Project Wizard and create a new Android application. I set the minimum SDK version to Honeycomb in the screenshot below, but feel free to pick something newer if you&rsquo;d like.</p>

<p><img class="center" src="/images/2013/08/14/android_wizard.png" width="500" height="500" title="Android New Project Wizard" ></p>

<p>You&rsquo;ll then be taken to a screen to create your starting activity. Choose Blank Activity, and feel free to name it whatever you like.</p>

<p><img class="center" src="/images/2013/08/14/android_wizard_3.png" width="500" height="500" title="Android New Project Wizard" ></p>

<p>After you complete the wizard, you&rsquo;ll have a new project in your workspace. Copy the Parse jar file that you downloaded before to the <code>libs/</code> directory, and you&rsquo;ll be all set to begin coding.</p>

<h2>Let&rsquo;s Code</h2>

<h3>Parse Setup</h3>

<p>First thing we&rsquo;ll add is the code to set up Parse. In the onCreate method of your Activity, add the following (remember to replace APP_ID and CLIENT_ID with the keys you got from Parse earlier):
``` java
Parse.initialize(this, &ldquo;APP_ID&rdquo;, &ldquo;CLIENT_ID&rdquo;);
ParseAnalytics.trackAppOpened(getIntent());</p>

<p>```</p>

<p>That second line is optional, but it adds analytics tracking to your app, which is a nice feature to get for free. In addition to that initializer code, we&rsquo;ll need to add get some permissions for our app. Add the following two permissions to your AndroidManifest.xml file, above the <code>&lt;application&gt;</code> tag:
<code>
&lt;uses-permission android:name="android.permission.INTERNET" /&gt;
&lt;uses-permission android:name="android.permission.ACCESS_NETWORK_STATE" /&gt;
</code></p>

<h3>Data Model</h3>

<p>Now we&rsquo;re able to interact with Parse using the included library. The next thing we&rsquo;ll want to do is to declare a Task model. This object will represent an individual Task Object in Parse&rsquo;s datastore. Create a new class named Task.java, and fill it out like the following:</p>

<p>``` java Task.java
import com.parse.ParseClassName;
import com.parse.ParseObject;</p>

<p>@ParseClassName(&ldquo;Task&rdquo;)
public class Task extends ParseObject{</p>

<pre><code>public Task(){

}

public boolean isCompleted(){
    return getBoolean("completed");
}

public void setCompleted(boolean complete){
    put("completed", complete);
}

public String getDescription(){
    return getString("description");
}

public void setDescription(String description){
    put("description", description);
}
</code></pre>

<p>}
```</p>

<p>The annotation tells Parse what &ldquo;table&rdquo; that our object corresponds with, and then we are providing methods to get and set two properties: a description, and a completed status. In addition to those, Parse will give us created_at and updated_at fields for free.</p>

<p>Now that we&rsquo;ve declared our model, we need to register this class with our activity. Below the initialization code, add a line like this:
<code>java
ParseObject.registerSubclass(Task.class)
</code></p>

<h3>The Layout</h3>

<p>This tells Parse to use the annotation that we declared at the top of the model. The next thing we want to do is set up the layout for our activity. This XML file will represent the UI of our application. Open up the todo_activity.xml file, and replace the contents with this:
``` xml
&lt;LinearLayout xmlns:android=&ldquo;<a href="http://schemas.android.com/apk/res/android">http://schemas.android.com/apk/res/android</a>&rdquo;</p>

<pre><code>xmlns:tools="http://schemas.android.com/tools"
android:layout_width="match_parent"
android:layout_height="match_parent"
android:orientation="vertical"
android:paddingLeft="@dimen/activity_horizontal_margin"
android:paddingRight="@dimen/activity_horizontal_margin"
tools:context=".TodoActivity" &gt;

&lt;LinearLayout
    android:layout_width="match_parent"
    android:layout_height="wrap_content"
    android:orientation="horizontal" &gt;

    &lt;EditText
        android:id="@+id/task_input"
        android:layout_width="0dp"
        android:layout_height="wrap_content"
        android:layout_weight="1"
        android:ems="10"
        android:inputType="text" 
        android:hint="Enter a Task"&gt;
        &lt;requestFocus /&gt;
    &lt;/EditText&gt;

    &lt;Button
        android:id="@+id/submit_button"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:onClick="createTask"
        android:text="Submit" /&gt;
&lt;/LinearLayout&gt;

&lt;ListView
    android:id="@+id/task_list"
    android:layout_width="match_parent"
    android:layout_height="wrap_content" /&gt;
</code></pre>

<p></LinearLayout>
```</p>

<p>Here we are declaring a layout that contains an input field and a button (for creating new tasks), as well as a ListView for showing the existing tasks. If you run what we&rsquo;ve done so far, you should end up with an application on your device that looks like this:</p>

<p><img class="center" src="/images/2013/08/14/step1.png" width="300" height="500" title="First Run" ></p>

<p>You can type in the input box, but if you hit the submit button, you&rsquo;ll notice the app will crash. Why&rsquo;s that? Because we said in our XML that the button will perform the <code>createTask</code> method when you click on it, but we never declared that method in our activity. Let&rsquo;s do that now.</p>

<p>In your onCreate method, let&rsquo;s get a reference to the EditText and ListView, since we&rsquo;ll be using these later. You can do that by declaring using the <code>findViewById()</code> method. We&rsquo;ll save the results of these calls as private variables. For example:
<code>java
mTaskInput = (EditText) findViewById(R.id.task_input);
mListView = (ListView) findViewById(R.id.task_list);
</code></p>

<p>Then we can create the createTask method:
``` java
public void createTask(View v) {</p>

<pre><code>    if (mTaskInput.getText().length() &gt; 0){
        Task t = new Task();
        t.setDescription(mTaskInput.getText().toString());
        t.setCompleted(false);
        t.saveEventually();
        mTaskInput.setText("");
    }
} 
</code></pre>

<p>```</p>

<p>What we are doing here is checking to see if the input has anything in it (don&rsquo;t want to create a task without a description), creating a new Task object, setting its fields, and then calling <code>saveEventually()</code>. This is a convenience method from Parse, that will queue this object to be saved. That way, if the user doesn&rsquo;t have a network connection, the task will be uploaded later when they are back online. Finally, we empty out the input field so that it&rsquo;s ready for another task.</p>

<p>Now if you type in a task and hit save, the input field will be blank, but if you go to your Parse Console, you&rsquo;ll see the data in the data browser:</p>

<p><img class="center" src="/images/2013/08/14/parse_console.png" width="800" height="800" title="Parse Console" ></p>

<p>Now let&rsquo;s set up the app to fetch the Tasks from Parse.</p>

<h3>Querying</h3>

<p>First let&rsquo;s set up a TaskAdapter. An adapter is what you add to a ListView to decide what kind of behavior the list will have (layout of each row, etc.) Create a new class called TaskAdapter that extends from ArrayAdapter like the following:</p>

<p>``` java
import java.util.List;</p>

<p>import android.content.Context;
import android.graphics.Paint;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ArrayAdapter;
import android.widget.TextView;</p>

<p>public class TaskAdapter extends ArrayAdapter<Task> {</p>

<pre><code>private Context mContext;
private List&lt;Task&gt; mTasks;

public TaskAdapter(Context context, List&lt;Task&gt; objects) {
    super(context, R.layout.task_row_item, objects);
    this.mContext = context;
    this.mTasks = objects;
}

public View getView(int position, View convertView, ViewGroup parent){
    if(convertView == null){
        LayoutInflater mLayoutInflater = LayoutInflater.from(mContext);
        convertView = mLayoutInflater.inflate(R.layout.task_row_item, null);
    }

    Task task = mTasks.get(position);

    TextView descriptionView = (TextView) convertView.findViewById(R.id.task_description);

    descriptionView.setText(task.getDescription());

    if(task.isCompleted()){
        descriptionView.setPaintFlags(descriptionView.getPaintFlags() | Paint.STRIKE_THRU_TEXT_FLAG);
    }else{
        descriptionView.setPaintFlags(descriptionView.getPaintFlags() &amp; (~Paint.STRIKE_THRU_TEXT_FLAG));
    }

    return convertView;
}
</code></pre>

<p>}
```</p>

<p>This class will take an array of Tasks, and for each row in the ListView, set a TextView with the id <code>task_description</code> to the description value, and set a paint flag for Strikethrough if the task is completed. You&rsquo;ll also notice that this class inflates a layout called <code>task_row_item</code>, which we can create now.</p>

<p>In the <code>res/layouts/</code> folder, create a file called &lsquo;task_row_item.xml&rsquo;, and fill it with the following content:
``` xml
&lt;?xml version=&ldquo;1.0&rdquo; encoding=&ldquo;utf-8&rdquo;?>
&lt;LinearLayout xmlns:android=&ldquo;<a href="http://schemas.android.com/apk/res/android">http://schemas.android.com/apk/res/android</a>&rdquo;</p>

<pre><code>android:layout_width="match_parent"
android:layout_height="wrap_content"
android:paddingTop="@dimen/activity_vertical_margin"
android:paddingBottom="@dimen/activity_vertical_margin"
android:orientation="horizontal" &gt;

&lt;TextView
    android:id="@+id/task_description"
    android:layout_width="0dp"
    android:layout_height="wrap_content"
    android:layout_gravity="center_vertical"
    android:layout_weight="1"
    android:textAppearance="?android:attr/textAppearanceMedium" /&gt;
</code></pre>

<p></LinearLayout>
```</p>

<p>This is just a basic TextView which will hold the description of the item. Now that we have the adapter set up, let&rsquo;s create one and apply it to our ListView. Back in the onCreate method of our Activity, create an instance of our TaskAdapter, and set its initial contents to a new ArrayList of Tasks, and then set the adapter of our ListView to this adapter.
<code>java
mAdapter = new TaskAdapter(this, new ArrayList&lt;Task&gt;());
mListView.setAdapter(mAdapter);
</code></p>

<p>You&rsquo;ll notice that nothing happens if you run the application again, since we didn&rsquo;t yet fetch any data from Parse. Create a new method called <code>updateData()</code> and put in the following code: (be sure to make a call to this method at the end of <code>onCreate()</code>)
``` java
public void updateData(){</p>

<pre><code>ParseQuery&lt;Task&gt; query = ParseQuery.getQuery(Task.class);
query.findInBackground(new FindCallback&lt;Task&gt;() {

    @Override
    public void done(List&lt;Task&gt; tasks, ParseException error) {
        if(tasks != null){
            mAdapter.clear();
            mAdapter.addAll(tasks);
        }
    }
});
</code></pre>

<p>}
```</p>

<p>This will query Parse for all the Task objects, and return a list of them. Then we will clear the existing set of Tasks from our adapter, and replace the existing list with those. Now if you run the app, you&rsquo;ll be greeted with something like the following:</p>

<p><img class="center" src="/images/2013/08/14/step2.png" width="300" height="500" title="Step 2" ></p>

<p>Let&rsquo;s also add this to our <code>createTask()</code> method, to insert the Task we just created at the top of the list:
<code>java
mAdapter.insert(t, 0);
</code></p>

<p>This will provide the user with an immediate hint of what happened, rather than uploading it, and waiting to resync the data or something.</p>

<p>Now we&rsquo;re starting to have a functional app! Let&rsquo;s add one more feature though. When you tap on a ListView row, the &ldquo;completed&rdquo; status of the task should toggle.</p>

<h3>Let&rsquo;s Toggle!</h3>

<p>Let&rsquo;s register an OnItemClickListener for our class, so that we&rsquo;ll get a callback whenever a list item is clicked. We can do that with a call to
<code>java
mListView.setOnItemClickListener(this);
</code></p>

<p>Then we just make our Activity implement the <code>OnItemClickListener</code> interface, and override the <code>onItemClick</code> method. We can use some code like this:
``` java
@Override
public void onItemClick(AdapterView&lt;?> parent, View view, int position, long id) {</p>

<pre><code>Task task = mAdapter.getItem(position);
TextView taskDescription = (TextView) view.findViewById(R.id.task_description);

task.setCompleted(!task.isCompleted());

if(task.isCompleted()){
    taskDescription.setPaintFlags(taskDescription.getPaintFlags() | Paint.STRIKE_THRU_TEXT_FLAG);
}else{
    taskDescription.setPaintFlags(taskDescription.getPaintFlags() &amp; (~Paint.STRIKE_THRU_TEXT_FLAG));
}

task.saveEventually();
</code></pre>

<p>}
```</p>

<p>This will toggle the completion status of the clicked item, and then update the strikethrough, just as we did in the ArrayAdapter before. Then we&rsquo;ll make another call to <code>saveEventually()</code>, to update that task on Parse&rsquo;s servers, when a network connection is available.</p>

<p>That&rsquo;s it! Now you should be able to launch the application, and create, complete and un-complete tasks as you wish!</p>

<p><img class="center" src="/images/2013/08/14/step3.png" width="300" height="500" title="Step 2" ></p>

<h2>Optimizations/Improvements</h2>

<p>Let&rsquo;s make some quick improvements to the app. First, let&rsquo;s extract the hardcoded strings in our layout to a strings.xml file, so that we can support other languages. Change the text in the <code>android:text=</code> attributes to something like <code>@string/submit_text</code>, and create a <code>strings.xml</code> file in <code>res/values</code> where these strings will live. This allows you to create other values folders for quick localization.</p>

<p>The other optimization that we&rsquo;ll make is regarding the caching. You&rsquo;ll notice that if you leave the application and come back, you&rsquo;re left with a blank white screen while the Tasks are loaded from Parse. This is a bit ugly, and leaves a bad user experience. We can mitigate that by adding caching, where the results of our query will be saved locally so that we have results instantly, and then we can request the updated tasks from the network. With Parse, this is dead simple. Add the following snippet to your <code>query</code> object before you do a findInBackground:
<code>java
query.setCachePolicy(CachePolicy.CACHE_THEN_NETWORK);
</code>
Now when you load up the app, you&rsquo;ll see the tasks from last time in the list, while the network is being queried.</p>

<h2>Possibilities for Next Time</h2>

<p>Next time we can take a look at adding multi-user support (so that not everyone shares a task list), and possibly some fancier UI, like a swipe-to-remove feature. Feel free to make other suggestions of things you&rsquo;d like to see!</p>

<p><strong>You can download the APK for this tutorial <a href="https://app.box.com/s/e79stk16p1b92w937e6q">here</a>, and find the source on Github <a href="https://github.com/MichaelEvans/Parse-Android-Todo">here</a>.</strong></p>

<hr />

<p>Like this post? Questions, concerns or mistakes? Any other Android tutorials you&rsquo;d like to hear about? Let me know on <a href="https://twitter.com/m_evans10">Twitter</a> or <a href="https://plus.google.com/114052868601022948953/posts">Google Plus</a>, or leave a comment below.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Clickable Links in Android ListViews]]></title>
    <link href="http://michaelevans.org/blog/2013/03/29/clickable-links-in-android-listviews/"/>
    <updated>2013-03-29T00:14:00-04:00</updated>
    <id>http://michaelevans.org/blog/2013/03/29/clickable-links-in-android-listviews</id>
    <content type="html"><![CDATA[<p>As part of my newest app (<a href="https://play.google.com/store/apps/details?id=com.evans.hackernews">Hacker News for Android</a>), I needed to add the ability to click on links in a ListView, and have them open in the browser, while maintaining the ability for the user to click on the ListView row itself, and have the row listen to the click.</p>

<p>If you try using <code>Linkify</code> and <code>LinkMovementMethod</code>, which you&rsquo;d use on normal links in a TextView, you&rsquo;ll find that you can no longer use the ListView properly.</p>

<!-- more -->


<p>The solution I&rsquo;m using is slightly modified from this answer on StackOverflow <a href="http://stackoverflow.com/a/7327332/458603">here</a>.</p>

<p>``` java LinkifiedTextView.java
import android.content.Context;
import android.text.Layout;
import android.text.Selection;
import android.text.Spannable;
import android.text.Spanned;
import android.text.style.ClickableSpan;
import android.util.AttributeSet;
import android.view.MotionEvent;
import android.widget.TextView;</p>

<p>public class LinkifiedTextView extends TextView {</p>

<pre><code>public LinkifiedTextView(Context context, AttributeSet attrs) {
    super(context, attrs);
}

@Override
public boolean onTouchEvent(MotionEvent event) {
    TextView widget = (TextView) this;
    Object text = widget.getText();
    if (text instanceof Spanned) {
        Spannable buffer = (Spannable) text;

        int action = event.getAction();

        if (action == MotionEvent.ACTION_UP
                || action == MotionEvent.ACTION_DOWN) {
            int x = (int) event.getX();
            int y = (int) event.getY();

            x -= widget.getTotalPaddingLeft();
            y -= widget.getTotalPaddingTop();

            x += widget.getScrollX();
            y += widget.getScrollY();

            Layout layout = widget.getLayout();
            int line = layout.getLineForVertical(y);
            int off = layout.getOffsetForHorizontal(line, x);

            ClickableSpan[] link = buffer.getSpans(off, off,
                    ClickableSpan.class);

            if (link.length != 0) {
                if (action == MotionEvent.ACTION_UP) {
                    link[0].onClick(widget);
                } else if (action == MotionEvent.ACTION_DOWN) {
                    Selection.setSelection(buffer,
                            buffer.getSpanStart(link[0]),
                            buffer.getSpanEnd(link[0]));
                }
                return true;
            }
        }

    }

    return false;
}
</code></pre>

<p>}
```</p>

<p>Just drop this in as a replacement for your normal TextView, and you&rsquo;ll have the clicks on links in your text intercepted. Hope this helps a fellow developer!</p>

<hr />

<p>Like this post? Any other Android tips you&rsquo;d like to hear about? Let me know on <a href="https://twitter.com/m_evans10">Twitter</a> or <a href="https://plus.google.com/114052868601022948953/posts">Google Plus</a>, or leave a comment.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A Guide to Unlocking and Rooting your Android Phone]]></title>
    <link href="http://michaelevans.org/blog/2013/01/09/a-guide-to-unlocking-and-rooting-your-android-phone/"/>
    <updated>2013-01-09T10:45:00-05:00</updated>
    <id>http://michaelevans.org/blog/2013/01/09/a-guide-to-unlocking-and-rooting-your-android-phone</id>
    <content type="html"><![CDATA[<p>Something that is very popular in the Android world these days is rooting and installing custom ROMs on your phone. A problem that I&rsquo;ve found however, is that information regarding the process, and the terminology involved can be quite confusing for someone getting started, and as a result might discourage them. I decided to write up a series of blog posts discussing various parts of this process, so that it might help someone who wants to get involved, but doesn&rsquo;t know how. The phone that I&rsquo;ll be using for these tutorials is an <a href="http://amzn.to/VAQwcM">HTC One V</a>, which can be used on Virgin Mobile. It&rsquo;s a fairly modern phone, comes with a 1GHz single-core CPU, 512MB RAM, and a nice 3.7 inch LCD. This process will almost identical for other HTC phones, and very similar for many other Android devices.</p>

<p>Disclaimer: This may void your warranty, I take no responsibility, etc.</p>

<!--more-->


<h2>Part One: Unlocking your One V</h2>

<p>The first part of the process is called &ldquo;Rooting&rdquo; your device. Rooting basically means obtaining admin access on your device, which allows you to do all sorts of fun things down the line. In order to root your device however, there are a few steps you&rsquo;ll have to take. The first thing you&rsquo;ll need to do is unlock the bootloader. The bootloader is the software that loads the operating system of your phone. Normally this is locked to only start the software that ships on the device, but we are going to unlock it so that we may install custom software.</p>

<ol>
<li>Go to <a href="http://www.htcdev.com/">HTC Dev</a> and create yourself an account.</li>
<li>Download <a href="https://www.box.com/s/kuouqnnsjke4byd2u38n">these</a> Fastboot Files</li>
<li>Make a new folder on your C: or home directory called fastboot.</li>
<li>Extract the zip downloaded in step 2 to the new folder</li>
<li>Go <a href="http://www.htcdev.com/bootloader/">here</a> and select &ldquo;All Other Supported Models&rdquo; and then &ldquo;Begin Unlock bootloader&rdquo;</li>
<li>Check both checkboxes, and then proceed.</li>
<li>Power off your phone by holding the power button down for 5-7 seconds (the three keys will flash a few times then it will power off)</li>
<li>Hold the volume down button and power the device on, the device will boot to a white screen called &ldquo;HBOOT&rdquo;</li>
<li>Select &ldquo;Fastboot&rdquo; with volume up or down then press the power button once (you&rsquo;ll be in fastboot mode)</li>
<li>Plug your phone into your computer and open a Command Prompt.</li>
<li>cd to your folder where we put fastboot files (i.e c:\fastboot)</li>
<li>type this into your command prompt: <code>fastboot oem get_identifier_token</code></li>
<li>Select &amp; copy the text as per step 9 on the HTC Dev website</li>
<li>Paste your identifier token into the box at the bottom and submit
You will then receive an email from HTCDev with a link to the second    part of the instructions and your &ldquo;Unlock_code.bin&rdquo; file attached.</li>
<li>Download the &ldquo;Unlock_code.bin&rdquo; attachment from the email and save it to     the same folder that we extracted fastboot files.</li>
<li>Type this into your command prompt window: <code>fastboot flash unlocktoken Unlock_code.bin</code></li>
<li>The display will change on your phone, and ask you to confirm the unlock. press volume up to accept and power to confirm.</li>
</ol>


<p><strong>Congratulations</strong>! You have successfully unlocked the bootloader.</p>

<h2>Part Two: Rooting the One V</h2>

<p>The next step in this process, is actually obtaining root access. In order to do that, we will be installing an application called SuperSU, which allows you to run applications on your phone with administrative priveledges (also known as superuser or root).</p>

<ol>
<li>Download <a href="https://www.box.com/s/zli0tchzdbs6dtwgv7px">r1-primo-cdma-superboot.zip</a> to your computer and extract in any directory.</li>
<li>Power off your phone by holding the power button down for 5-7 seconds (the three keys will flash a few times then it will power off)</li>
<li>Hold volume down button while powering on, the device will boot to HBOOT (like we did before)</li>
<li>Select Fastboot with volume up or down then press power once</li>
<li>Connect your phone to PC</li>
<li>Double click ‘install-superboot-windows.bat’ (or mac or linux, depending on your platform)</li>
</ol>


<p><strong>Excellent!</strong> You now have root access on your phone. When you start up Android, you&rsquo;ll see a new application in your launcher. It&rsquo;s called SuperSU, and will ask you to allow/deny applications root access if they request it. This is useful for installing things like tethering applications, or modifying system files.</p>

<h2>Part Three: Installing Custom Recovery</h2>

<p>The last thing we are going to do as part of this guide is install a custom recovery. A recovery is a mode of the phone that allows you to backup/restore your device, or modify device files, like installing new software. This will be important if you&rsquo;d like to backup your device before wiping it to install custom software. In order to install ClockworkMod Recovery (which is probably the most popular recovery you&rsquo;ll find):</p>

<ol>
<li>Download ClockworkMod Recovery <a href="https://www.box.com/s/vj181v9mmi5tghm1za4b">here</a>.</li>
<li>Power off your phone by holding the power button down for 5-7 seconds (the three keys will flash a few times then it will power off)</li>
<li>Hold the volume down button while powering on, the device will boot to HBOOT (You should be getting the hang of this by now)</li>
<li>Select Fastboot with volume up or down then press power once</li>
<li>Connect your phone to PC</li>
<li>Type the following in to your command prompt: <code>adb flash recovery cwmrecovery.img</code></li>
<li>Restart your phone, and hold the volume down button. This time, select &ldquo;recovery&rdquo; and hit the power button.</li>
</ol>


<p>You&rsquo;re now in recovery mode! While we&rsquo;re here, let&rsquo;s make a backup.</p>

<ol>
<li>Scroll through the list of options 2 times using volume up or volume down. (Without doing this, you won&rsquo;t be able to select an option)</li>
<li>Use the power button to select &ldquo;Backup and restore&rdquo;</li>
<li>Select &ldquo;Backup&rdquo;</li>
<li>The backup process is now running. It will be a few minutes to complete.</li>
<li>Once complete, let&rsquo;s make sure the backup is successful.</li>
<li>Once again, select &ldquo;Backup and restore&rdquo;</li>
<li>Choose &ldquo;Restore&rdquo;. You will see your backup files, e.g: 2013-01-12.10.13.04</li>
<li>Pick &ldquo;Go Back&rdquo;</li>
<li>Select &ldquo;Reboot system&rdquo;</li>
</ol>


<p>It&rsquo;s probably best to copy that backup folder off your SD card and onto your computer in the event something happens to your SD card.</p>

<p><strong>Awesome</strong>! You&rsquo;re now all set to do all sorts of things, like installing custom roms. Be sure to check back for the next part of this series, where we will go over that.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Nexus Q Review]]></title>
    <link href="http://michaelevans.org/blog/2012/09/07/nexus-q-review/"/>
    <updated>2012-09-07T20:11:00-04:00</updated>
    <id>http://michaelevans.org/blog/2012/09/07/nexus-q-review</id>
    <content type="html"><![CDATA[<p>It’s a <em>what</em>? Ever since I returned from Google I/O, this is what people have been saying when they see the newest addition to my TV setup, the Nexus Q. It’s hard to blame them though, since it just looks so different, for a home theatre device. unlike those bland, black boxes that most living rooms are filled with, the Nexus Q is a heavy (about two pounds) sphere, which is lit by a ring of 32 LEDs. The top side of the Q spins freely to function as a volume knob, and can be tapped to mute.</p>

<p><img src="/images/2012/09/07/q.jpeg" width="400" height="400" title="Nexus Q" ></p>

<p>On the back of the Q, things are less clean. There’s both micro HDMI and optical audio out, ethernet and a micro USB port for “encouraged hacking”. There’s also a set of banana connectors to allow you to hook up speakers to the built in 25-watt amplifier.</p>

<p>So how’s the UI of the Nexus Q, you might ask. Does it look as smooth as Jelly Bean does on the other devices that I <a href="/blog/2012/07/03/nexus-7-review/">showed you a few weeks ago</a>? Funny thing is, the Nexus Q doesn’t have a UI of it’s own; it requires an Android device to set up. All you need to do is tap an NFC enabled device to the sphere, and it will take you to download the Nexus Q app from Google Play. Start up the app, log in with your Google account, and you’re all set to use the Q.</p>

<p>Since the Q doesn’t have it’s own UI, let’s take a look at the <a href="https://play.google.com/store/apps/details?id=com.google.android.setupwarlock">Nexus Q app for Android</a>.</p>

<p><img src="/images/2012/09/07/qapp.jpeg" width="400" height="400" title="Nexus Q App" ></p>

<p>You don&rsquo;t really use the app for anything after setting up the Q initially, all the media is controlled through the Play Music, Play Movies and Youtube apps. All you need to do is hit the little triangle that will appear when you&rsquo;re on the same network as a Q.</p>

<p><img src="/images/2012/09/07/music.png" width="400" height="400" title="Play Music with Q" ></p>

<p>My biggest complaint about the Q is the way you set it up to involve your friends. First you need to enable guest mode from the Q app, and then manually invite all the people you want to have access, which actually sends them an <strong>email</strong> to download the app. This seems like such a convoluted process, and I doubt people will actually care to do this. Not only that, but I see no way of revoking someone’s ability to use the Q after you’ve invited them. We all know that one person who takes their music privileges a little too far, but it seems that the only recourse in that event is to turn guest mode off all together.</p>

<p>Is it work $300 right now? Probably not, no. Unless you’re a huge consumer of Play media, you’ll probably be better off with a Roku, or something like that. Even if you <strong>are</strong> a consumer of Play content, you’re probably better off with a Google TV, since after all, that does other things.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Nexus 7 Review]]></title>
    <link href="http://michaelevans.org/blog/2012/07/03/nexus-7-review/"/>
    <updated>2012-07-03T13:39:00-04:00</updated>
    <id>http://michaelevans.org/blog/2012/07/03/nexus-7-review</id>
    <content type="html"><![CDATA[<p>So by now you&rsquo;ve probably heard about the Nexus 7. We heard it was coming <a href="/blog/2012/06/26/shots-from-outside-io-2012/">last week</a>, and now after using it for a few days, here&rsquo;s my review.</p>

<p><img src="/images/2012/07/03/nexus.jpg" width="400" height="200" title="Nexus 7" ></p>

<!-- more -->


<p></p>

<p>As a backstory, you should know that prior to recieving the Nexus 7 at Google IO, I already owned a Motorola Xoom, a Samsung Galaxy 10.1 (from IO 2011), and an HP Touchpad. Surprising as it might seem for someone with all these gadgets, I actually don&rsquo;t really <em>get</em> tablets. I have a laptop, and a smartphone, and there just really isn&rsquo;t a whole lot of use for a tablet that I&rsquo;ve found. I&rsquo;ve tried them all, including the iPad, and I just haven&rsquo;t found a way to fit it into the collection of things I use on a daily basis.</p>

<p>But, I don&rsquo;t give up trying so easily. Nor has Google it seems, because slowly but surely, Google has finally put together a combination of software and hardware that is an absolute pleasure to use. Not only that, but at $200, it&rsquo;s a steal compared to <a href="http://www.apple.com/ipad/">other popular options</a>.</p>

<p>The best way to review the Nexus however, is by breaking it down into the two main components that it&rsquo;s comprised of: software and hardware.</p>

<h2>Software</h2>

<p>The core of the Nexus 7 is Android 4.1, codenamed &ldquo;Jelly Bean&rdquo;. Jelly Bean was not a revolutionary update like its predessesor, Ice Cream Sandwich, but an evolutionary one. It includes three main changes, as well as some small ones. The main changes were &ldquo;Project Butter&rdquo;, Google Search, and Google Now.</p>

<h4>Project Butter</h4>

<p><a href="http://www.youtube.com/watch?v=VuC0i4xTyrI#t=6m15s">Project Butter</a> has probably made the most significant impact for me on the overall feel of Android. Prior to IO, my main complaint with Android was how occasionally laggy it was. However, in Jelly Bean, Google has smoothed out the experience with faster response to touch, animations, and even has the CPU ramp up faster as a response to touch events. Speaking of touch events, Google has apparently devised a way to predict where your fingers will be, and allows the system to respond more quickly as a result. The sum of these changes results in a much smoother feel to the entire operating system.</p>

<h4>Google Search</h4>

<p>Google&rsquo;s new voice search is their strike back against Siri. Powered by Google&rsquo;s Knowledge Graph, it can do a lot more than Apple&rsquo;s offering.</p>

<p><img class="left" src="/images/2012/07/03/voice.jpg" width="375" height="200" title="Voice Search Demo" ></p>

<p>The speech-to-text seems to be significantly more accurate than Apple&rsquo;s, as well as much quicker. I imagine this is because Google has moved the speech-to-text engine onto the device, as this is another feature of the new keyboard (more on that below).</p>

<p>Instead of just listing off a whole bunch of things that I&rsquo;ve tried, here&rsquo;s a video from <a href="http://www.youtube.com/watch?v=fHkhp6BwnGo">JLishere</a>, who has compiled 41 queries against knoweledge graph. He demonstrates the wide variety of what Knowledge Graph allows the device to respond to, like local queries, transit directions, and what seems to just be tidbits from Wikipedia.</p>

<p>What&rsquo;s most interesting to me, however, is the preview of the possibile ability to access core hardware functions, like turning on and off Wifi or Bluetooth. Another interesting feature is how this new voice search seems to fit in well with another new platform feature: Google Now.</p>

<h4>Google Now</h4>

<p>Google Now is a new card based system introduced in the new version of Android. It tells you about the weather, traffic information, sports scores, and other tidbits of information you&rsquo;re likely to look up during your day. It&rsquo;s quite convenient to have information about an upcoming flight available without having to keep checking it, or traffic information regarding my daily commute delivered right to my handset or tablet. Right now the number of available &lsquo;cards&rsquo; is limited, but as the number of uses expands, the functionality will continue to grow.</p>

<h4>Other features</h4>

<p>In addition to the fancy speech-to-text features, as well as the speed improvements, Google has added rich notifications that allow you to perform actions without opening the app. You can control the music player, or reply to a SMS message, all from the notification tray. Another addition is a new keyboard, which does text prediction. If you&rsquo;ve ever used Swiftkey, you&rsquo;ll feel right at home with the new stock keyboard. Also included is the offline speech-to-text engine, which allows for speedy transcription, if you&rsquo;re into that.</p>

<p>Other changes include some fancy new camera and gallery improvements, and now Chrome is the standard browser. Combined with tab sync from other machines, this is the best mobile browsing experience I&rsquo;ve had so far.</p>

<h2>Hardware</h2>

<p>At 340 grams (compared to the Kindle Fire’s 413 grams), the Nexus 7 feels extremely light. It measures 10.45mm thick, which is just shy of the thickness of the Kindle Fire. The front of the tablet is an IPS 7-inch 1280 x 800 display, which is powered by an NVIDIA Tegra 3 quad-core processor, with 12 GPU cores, and 1GB of RAM. As for storage, it comes in 8GB ($199) and 16GB ($249) capacities.</p>

<p><img class="right" src="/images/2012/07/03/chrome.jpg" width="375" height="200" title="Chrome" ></p>

<p>In addition to that serious computing power, the Nexus 7 has plenty of sensors and radios. Under the hood, there&rsquo;s Bluetooth and NFC, not to mention GPS, an accelerometer, a digital compass and a gyroscope. All this is paired with a battery that managed to last me around eight hours. Based on other reviews I&rsquo;ve seen, the battery seems to last between seven and nine hours, depending on usage.</p>

<p>This all sounds fantastic, but there&rsquo;s a few things that could have been added/improved as well. First, since there&rsquo;s a lack of a rear camera, no camera app has been included. This is most certainly not a deal breaker, but it&rsquo;s worth noting, if you&rsquo;re into self portraits. There&rsquo;s also no HDMI/MHL output, nor a MicroSD slot. The only other gripe that I have is that the speakers are fairly inadiquite, so you&rsquo;ll be reaching for your headphones.</p>

<p>The Nexus 7 is a great deal for a tablet that costs just under $200. It has a great display, smooth performance and all the bells and whistles of Jelly Bean. In my opinion, this is the best Android tablet available.</p>

<p>And for the first time, I&rsquo;m actually excited about using a tablet.</p>

<p>Oh yeah, if you were wondering: I did preorder Project Glass.</p>
]]></content>
  </entry>
  
</feed>
